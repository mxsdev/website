/* const findRoots = require("durand-kerner") */
import { allRoots } from "flo-poly"
import { Point } from "./types"

export function curvatureMaxima(p1: Point, p2: Point, p3: Point, p4: Point): number[] {
    const [x0, y0] = p1
    const [x1, y1] = p2
    const [x2, y2] = p3
    const [x3, y3] = p4

    const poly1 = [12*x0**3*y1 - 24*x0**3*y2 + 12*x0**3*y3 - 12*x0**2*x1*y0 - 72*x0**2*x1*y1 + 180*x0**2*x1*y2 - 96*x0**2*x1*y3 + 24*x0**2*x2*y0 + 36*x0**2*x2*y1 - 144*x0**2*x2*y2 + 84*x0**2*x2*y3 - 12*x0**2*x3*y0 + 36*x0**2*x3*y2 - 24*x0**2*x3*y3 + 72*x0*x1**2*y0 + 108*x0*x1**2*y1 - 432*x0*x1**2*y2 + 252*x0*x1**2*y3 - 216*x0*x1*x2*y0 + 648*x0*x1*x2*y2 - 432*x0*x1*x2*y3 + 96*x0*x1*x3*y0 - 72*x0*x1*x3*y1 - 144*x0*x1*x3*y2 + 120*x0*x1*x3*y3 + 144*x0*x2**2*y0 - 108*x0*x2**2*y1 - 216*x0*x2**2*y2 + 180*x0*x2**2*y3 - 120*x0*x2*x3*y0 + 144*x0*x2*x3*y1 + 72*x0*x2*x3*y2 - 96*x0*x2*x3*y3 + 24*x0*x3**2*y0 - 36*x0*x3**2*y1 + 12*x0*x3**2*y3 + 12*x0*y0**2*y1 - 24*x0*y0**2*y2 + 12*x0*y0**2*y3 - 72*x0*y0*y1**2 + 216*x0*y0*y1*y2 - 96*x0*y0*y1*y3 - 144*x0*y0*y2**2 + 120*x0*y0*y2*y3 - 24*x0*y0*y3**2 + 108*x0*y1**3 - 432*x0*y1**2*y2 + 180*x0*y1**2*y3 + 540*x0*y1*y2**2 - 432*x0*y1*y2*y3 + 84*x0*y1*y3**2 - 216*x0*y2**3 + 252*x0*y2**2*y3 - 96*x0*y2*y3**2 + 12*x0*y3**3 - 108*x1**3*y0 + 324*x1**3*y2 - 216*x1**3*y3 + 432*x1**2*x2*y0 - 324*x1**2*x2*y1 - 648*x1**2*x2*y2 + 540*x1**2*x2*y3 - 180*x1**2*x3*y0 + 216*x1**2*x3*y1 + 108*x1**2*x3*y2 - 144*x1**2*x3*y3 - 540*x1*x2**2*y0 + 648*x1*x2**2*y1 + 324*x1*x2**2*y2 - 432*x1*x2**2*y3 + 432*x1*x2*x3*y0 - 648*x1*x2*x3*y1 + 216*x1*x2*x3*y3 - 84*x1*x3**2*y0 + 144*x1*x3**2*y1 - 36*x1*x3**2*y2 - 24*x1*x3**2*y3 - 12*x1*y0**3 + 72*x1*y0**2*y1 - 36*x1*y0**2*y2 - 108*x1*y0*y1**2 + 72*x1*y0*y1*y3 + 108*x1*y0*y2**2 - 144*x1*y0*y2*y3 + 36*x1*y0*y3**2 + 324*x1*y1**2*y2 - 216*x1*y1**2*y3 - 648*x1*y1*y2**2 + 648*x1*y1*y2*y3 - 144*x1*y1*y3**2 + 324*x1*y2**3 - 432*x1*y2**2*y3 + 180*x1*y2*y3**2 - 24*x1*y3**3 + 216*x2**3*y0 - 324*x2**3*y1 + 108*x2**3*y3 - 252*x2**2*x3*y0 + 432*x2**2*x3*y1 - 108*x2**2*x3*y2 - 72*x2**2*x3*y3 + 96*x2*x3**2*y0 - 180*x2*x3**2*y1 + 72*x2*x3**2*y2 + 12*x2*x3**2*y3 + 24*x2*y0**3 - 180*x2*y0**2*y1 + 144*x2*y0**2*y2 - 36*x2*y0**2*y3 + 432*x2*y0*y1**2 - 648*x2*y0*y1*y2 + 144*x2*y0*y1*y3 + 216*x2*y0*y2**2 - 72*x2*y0*y2*y3 - 324*x2*y1**3 + 648*x2*y1**2*y2 - 108*x2*y1**2*y3 - 324*x2*y1*y2**2 + 36*x2*y1*y3**2 + 108*x2*y2**2*y3 - 72*x2*y2*y3**2 + 12*x2*y3**3 - 12*x3**3*y0 + 24*x3**3*y1 - 12*x3**3*y2 - 12*x3*y0**3 + 96*x3*y0**2*y1 - 84*x3*y0**2*y2 + 24*x3*y0**2*y3 - 252*x3*y0*y1**2 + 432*x3*y0*y1*y2 - 120*x3*y0*y1*y3 - 180*x3*y0*y2**2 + 96*x3*y0*y2*y3 - 12*x3*y0*y3**2 + 216*x3*y1**3 - 540*x3*y1**2*y2 + 144*x3*y1**2*y3 + 432*x3*y1*y2**2 - 216*x3*y1*y2*y3 + 24*x3*y1*y3**2 - 108*x3*y2**3 + 72*x3*y2**2*y3 - 12*x3*y2*y3**2, -60*x0**3*y1 + 105*x0**3*y2 - 45*x0**3*y3 + 60*x0**2*x1*y0 + 330*x0**2*x1*y1 - 705*x0**2*x1*y2 + 315*x0**2*x1*y3 - 105*x0**2*x2*y0 - 165*x0**2*x2*y1 + 510*x0**2*x2*y2 - 240*x0**2*x2*y3 + 45*x0**2*x3*y0 + 15*x0**2*x3*y1 - 120*x0**2*x3*y2 + 60*x0**2*x3*y3 - 330*x0*x1**2*y0 - 450*x0*x1**2*y1 + 1485*x0*x1**2*y2 - 705*x0*x1**2*y3 + 870*x0*x1*x2*y0 + 90*x0*x1*x2*y1 - 1980*x0*x1*x2*y2 + 1020*x0*x1*x2*y3 - 330*x0*x1*x3*y0 + 150*x0*x1*x3*y1 + 420*x0*x1*x3*y2 - 240*x0*x1*x3*y3 - 510*x0*x2**2*y0 + 270*x0*x2**2*y1 + 585*x0*x2**2*y2 - 345*x0*x2**2*y3 + 360*x0*x2*x3*y0 - 300*x0*x2*x3*y1 - 210*x0*x2*x3*y2 + 150*x0*x2*x3*y3 - 60*x0*x3**2*y0 + 60*x0*x3**2*y1 + 15*x0*x3**2*y2 - 15*x0*x3**2*y3 - 60*x0*y0**2*y1 + 105*x0*y0**2*y2 - 45*x0*y0**2*y3 + 330*x0*y0*y1**2 - 870*x0*y0*y1*y2 + 330*x0*y0*y1*y3 + 510*x0*y0*y2**2 - 360*x0*y0*y2*y3 + 60*x0*y0*y3**2 - 450*x0*y1**3 + 1575*x0*y1**2*y2 - 555*x0*y1**2*y3 - 1710*x0*y1*y2**2 + 1140*x0*y1*y2*y3 - 180*x0*y1*y3**2 + 585*x0*y2**3 - 555*x0*y2**2*y3 + 165*x0*y2*y3**2 - 15*x0*y3**3 + 450*x1**3*y0 - 945*x1**3*y2 + 495*x1**3*y3 - 1575*x1**2*x2*y0 + 945*x1**2*x2*y1 + 1620*x1**2*x2*y2 - 990*x1**2*x2*y3 + 555*x1**2*x3*y0 - 495*x1**2*x3*y1 - 270*x1**2*x3*y2 + 210*x1**2*x3*y3 + 1710*x1*x2**2*y0 - 1620*x1*x2**2*y1 - 675*x1*x2**2*y2 + 585*x1*x2**2*y3 - 1140*x1*x2*x3*y0 + 1260*x1*x2*x3*y1 + 90*x1*x2*x3*y2 - 210*x1*x2*x3*y3 + 180*x1*x3**2*y0 - 210*x1*x3**2*y1 + 15*x1*x3**2*y2 + 15*x1*x3**2*y3 + 60*x1*y0**3 - 330*x1*y0**2*y1 + 165*x1*y0**2*y2 - 15*x1*y0**2*y3 + 450*x1*y0*y1**2 - 90*x1*y0*y1*y2 - 150*x1*y0*y1*y3 - 270*x1*y0*y2**2 + 300*x1*y0*y2*y3 - 60*x1*y0*y3**2 - 945*x1*y1**2*y2 + 495*x1*y1**2*y3 + 1620*x1*y1*y2**2 - 1260*x1*y1*y2*y3 + 210*x1*y1*y3**2 - 675*x1*y2**3 + 675*x1*y2**2*y3 - 195*x1*y2*y3**2 + 15*x1*y3**3 - 585*x2**3*y0 + 675*x2**3*y1 - 90*x2**3*y3 + 555*x2**2*x3*y0 - 675*x2**2*x3*y1 + 90*x2**2*x3*y2 + 30*x2**2*x3*y3 - 165*x2*x3**2*y0 + 195*x2*x3**2*y1 - 30*x2*x3**2*y2 - 105*x2*y0**3 + 705*x2*y0**2*y1 - 510*x2*y0**2*y2 + 120*x2*y0**2*y3 - 1485*x2*y0*y1**2 + 1980*x2*y0*y1*y2 - 420*x2*y0*y1*y3 - 585*x2*y0*y2**2 + 210*x2*y0*y2*y3 - 15*x2*y0*y3**2 + 945*x2*y1**3 - 1620*x2*y1**2*y2 + 270*x2*y1**2*y3 + 675*x2*y1*y2**2 - 90*x2*y1*y2*y3 - 15*x2*y1*y3**2 - 90*x2*y2**2*y3 + 30*x2*y2*y3**2 + 15*x3**3*y0 - 15*x3**3*y1 + 45*x3*y0**3 - 315*x3*y0**2*y1 + 240*x3*y0**2*y2 - 60*x3*y0**2*y3 + 705*x3*y0*y1**2 - 1020*x3*y0*y1*y2 + 240*x3*y0*y1*y3 + 345*x3*y0*y2**2 - 150*x3*y0*y2*y3 + 15*x3*y0*y3**2 - 495*x3*y1**3 + 990*x3*y1**2*y2 - 210*x3*y1**2*y3 - 585*x3*y1*y2**2 + 210*x3*y1*y2*y3 - 15*x3*y1*y3**2 + 90*x3*y2**3 - 30*x3*y2**2*y3, 120*x0**3*y1 - 180*x0**3*y2 + 60*x0**3*y3 - 120*x0**2*x1*y0 - 600*x0**2*x1*y1 + 1080*x0**2*x1*y2 - 360*x0**2*x1*y3 + 180*x0**2*x2*y0 + 288*x0**2*x2*y1 - 696*x0**2*x2*y2 + 228*x0**2*x2*y3 - 60*x0**2*x3*y0 - 48*x0**2*x3*y1 + 156*x0**2*x3*y2 - 48*x0**2*x3*y3 + 600*x0*x1**2*y0 + 732*x0*x1**2*y1 - 2004*x0*x1**2*y2 + 672*x0*x1**2*y3 - 1368*x0*x1*x2*y0 - 192*x0*x1*x2*y1 + 2328*x0*x1*x2*y2 - 768*x0*x1*x2*y3 + 408*x0*x1*x3*y0 - 72*x0*x1*x3*y1 - 480*x0*x1*x3*y2 + 144*x0*x1*x3*y3 + 696*x0*x2**2*y0 - 312*x0*x2**2*y1 - 564*x0*x2**2*y2 + 180*x0*x2**2*y3 - 384*x0*x2*x3*y0 + 240*x0*x2*x3*y1 + 192*x0*x2*x3*y2 - 48*x0*x2*x3*y3 + 48*x0*x3**2*y0 - 36*x0*x3**2*y1 - 12*x0*x3**2*y2 + 120*x0*y0**2*y1 - 180*x0*y0**2*y2 + 60*x0*y0**2*y3 - 600*x0*y0*y1**2 + 1368*x0*y0*y1*y2 - 408*x0*y0*y1*y3 - 696*x0*y0*y2**2 + 384*x0*y0*y2*y3 - 48*x0*y0*y3**2 + 732*x0*y1**3 - 2196*x0*y1**2*y2 + 600*x0*y1**2*y3 + 2016*x0*y1*y2**2 - 1008*x0*y1*y2*y3 + 108*x0*y1*y3**2 - 564*x0*y2**3 + 372*x0*y2**2*y3 - 60*x0*y2*y3**2 - 732*x1**3*y0 + 1116*x1**3*y2 - 384*x1**3*y3 + 2196*x1**2*x2*y0 - 1116*x1**2*x2*y1 - 1656*x1**2*x2*y2 + 576*x1**2*x2*y3 - 600*x1**2*x3*y0 + 384*x1**2*x3*y1 + 312*x1**2*x3*y2 - 96*x1**2*x3*y3 - 2016*x1*x2**2*y0 + 1656*x1*x2**2*y1 + 576*x1*x2**2*y2 - 216*x1*x2**2*y3 + 1008*x1*x2*x3*y0 - 888*x1*x2*x3*y1 - 168*x1*x2*x3*y2 + 48*x1*x2*x3*y3 - 108*x1*x3**2*y0 + 96*x1*x3**2*y1 + 12*x1*x3**2*y2 - 120*x1*y0**3 + 600*x1*y0**2*y1 - 288*x1*y0**2*y2 + 48*x1*y0**2*y3 - 732*x1*y0*y1**2 + 192*x1*y0*y1*y2 + 72*x1*y0*y1*y3 + 312*x1*y0*y2**2 - 240*x1*y0*y2*y3 + 36*x1*y0*y3**2 + 1116*x1*y1**2*y2 - 384*x1*y1**2*y3 - 1656*x1*y1*y2**2 + 888*x1*y1*y2*y3 - 96*x1*y1*y3**2 + 576*x1*y2**3 - 384*x1*y2**2*y3 + 60*x1*y2*y3**2 + 564*x2**3*y0 - 576*x2**3*y1 + 12*x2**3*y3 - 372*x2**2*x3*y0 + 384*x2**2*x3*y1 - 12*x2**2*x3*y2 + 60*x2*x3**2*y0 - 60*x2*x3**2*y1 + 180*x2*y0**3 - 1080*x2*y0**2*y1 + 696*x2*y0**2*y2 - 156*x2*y0**2*y3 + 2004*x2*y0*y1**2 - 2328*x2*y0*y1*y2 + 480*x2*y0*y1*y3 + 564*x2*y0*y2**2 - 192*x2*y0*y2*y3 + 12*x2*y0*y3**2 - 1116*x2*y1**3 + 1656*x2*y1**2*y2 - 312*x2*y1**2*y3 - 576*x2*y1*y2**2 + 168*x2*y1*y2*y3 - 12*x2*y1*y3**2 + 12*x2*y2**2*y3 - 60*x3*y0**3 + 360*x3*y0**2*y1 - 228*x3*y0**2*y2 + 48*x3*y0**2*y3 - 672*x3*y0*y1**2 + 768*x3*y0*y1*y2 - 144*x3*y0*y1*y3 - 180*x3*y0*y2**2 + 48*x3*y0*y2*y3 + 384*x3*y1**3 - 576*x3*y1**2*y2 + 96*x3*y1**2*y3 + 216*x3*y1*y2**2 - 48*x3*y1*y2*y3 - 12*x3*y2**3, -120*x0**3*y1 + 150*x0**3*y2 - 30*x0**3*y3 + 120*x0**2*x1*y0 + 540*x0**2*x1*y1 - 810*x0**2*x1*y2 + 150*x0**2*x1*y3 - 150*x0**2*x2*y0 - 234*x0**2*x2*y1 + 456*x0**2*x2*y2 - 72*x0**2*x2*y3 + 30*x0**2*x3*y0 + 54*x0**2*x3*y1 - 96*x0**2*x3*y2 + 12*x0**2*x3*y3 - 540*x0*x1**2*y0 - 576*x0*x1**2*y1 + 1344*x0*x1**2*y2 - 228*x0*x1**2*y3 + 1044*x0*x1*x2*y0 + 96*x0*x1*x2*y1 - 1320*x0*x1*x2*y2 + 180*x0*x1*x2*y3 - 204*x0*x1*x3*y0 - 24*x0*x1*x3*y1 + 252*x0*x1*x3*y2 - 24*x0*x1*x3*y3 - 456*x0*x2**2*y0 + 240*x0*x2**2*y1 + 234*x0*x2**2*y2 - 18*x0*x2**2*y3 + 168*x0*x2*x3*y0 - 108*x0*x2*x3*y1 - 60*x0*x2*x3*y2 - 12*x0*x3**2*y0 + 12*x0*x3**2*y1 - 120*x0*y0**2*y1 + 150*x0*y0**2*y2 - 30*x0*y0**2*y3 + 540*x0*y0*y1**2 - 1044*x0*y0*y1*y2 + 204*x0*y0*y1*y3 + 456*x0*y0*y2**2 - 168*x0*y0*y2*y3 + 12*x0*y0*y3**2 - 576*x0*y1**3 + 1440*x0*y1**2*y2 - 252*x0*y1**2*y3 - 1080*x0*y1*y2**2 + 324*x0*y1*y2*y3 - 12*x0*y1*y3**2 + 234*x0*y2**3 - 78*x0*y2**2*y3 + 576*x1**3*y0 - 684*x1**3*y2 + 108*x1**3*y3 - 1440*x1**2*x2*y0 + 684*x1**2*x2*y1 + 864*x1**2*x2*y2 - 108*x1**2*x2*y3 + 252*x1**2*x3*y0 - 108*x1**2*x3*y1 - 156*x1**2*x3*y2 + 12*x1**2*x3*y3 + 1080*x1*x2**2*y0 - 864*x1*x2**2*y1 - 234*x1*x2**2*y2 + 18*x1*x2**2*y3 - 324*x1*x2*x3*y0 + 264*x1*x2*x3*y1 + 60*x1*x2*x3*y2 + 12*x1*x3**2*y0 - 12*x1*x3**2*y1 + 120*x1*y0**3 - 540*x1*y0**2*y1 + 234*x1*y0**2*y2 - 54*x1*y0**2*y3 + 576*x1*y0*y1**2 - 96*x1*y0*y1*y2 + 24*x1*y0*y1*y3 - 240*x1*y0*y2**2 + 108*x1*y0*y2*y3 - 12*x1*y0*y3**2 - 684*x1*y1**2*y2 + 108*x1*y1**2*y3 + 864*x1*y1*y2**2 - 264*x1*y1*y2*y3 + 12*x1*y1*y3**2 - 234*x1*y2**3 + 78*x1*y2**2*y3 - 234*x2**3*y0 + 234*x2**3*y1 + 78*x2**2*x3*y0 - 78*x2**2*x3*y1 - 150*x2*y0**3 + 810*x2*y0**2*y1 - 456*x2*y0**2*y2 + 96*x2*y0**2*y3 - 1344*x2*y0*y1**2 + 1320*x2*y0*y1*y2 - 252*x2*y0*y1*y3 - 234*x2*y0*y2**2 + 60*x2*y0*y2*y3 + 684*x2*y1**3 - 864*x2*y1**2*y2 + 156*x2*y1**2*y3 + 234*x2*y1*y2**2 - 60*x2*y1*y2*y3 + 30*x3*y0**3 - 150*x3*y0**2*y1 + 72*x3*y0**2*y2 - 12*x3*y0**2*y3 + 228*x3*y0*y1**2 - 180*x3*y0*y1*y2 + 24*x3*y0*y1*y3 + 18*x3*y0*y2**2 - 108*x3*y1**3 + 108*x3*y1**2*y2 - 12*x3*y1**2*y3 - 18*x3*y1*y2**2, 60*x0**3*y1 - 60*x0**3*y2 - 60*x0**2*x1*y0 - 240*x0**2*x1*y1 + 300*x0**2*x1*y2 + 60*x0**2*x2*y0 + 84*x0**2*x2*y1 - 144*x0**2*x2*y2 - 24*x0**2*x3*y1 + 24*x0**2*x3*y2 + 240*x0*x1**2*y0 + 216*x0*x1**2*y1 - 456*x0*x1**2*y2 - 384*x0*x1*x2*y0 + 24*x0*x1*x2*y1 + 360*x0*x1*x2*y2 + 24*x0*x1*x3*y0 + 24*x0*x1*x3*y1 - 48*x0*x1*x3*y2 + 144*x0*x2**2*y0 - 108*x0*x2**2*y1 - 36*x0*x2**2*y2 - 24*x0*x2*x3*y0 + 24*x0*x2*x3*y1 + 60*x0*y0**2*y1 - 60*x0*y0**2*y2 - 240*x0*y0*y1**2 + 384*x0*y0*y1*y2 - 24*x0*y0*y1*y3 - 144*x0*y0*y2**2 + 24*x0*y0*y2*y3 + 216*x0*y1**3 - 432*x0*y1**2*y2 + 24*x0*y1**2*y3 + 252*x0*y1*y2**2 - 24*x0*y1*y2*y3 - 36*x0*y2**3 - 216*x1**3*y0 + 216*x1**3*y2 + 432*x1**2*x2*y0 - 216*x1**2*x2*y1 - 216*x1**2*x2*y2 - 24*x1**2*x3*y0 + 24*x1**2*x3*y2 - 252*x1*x2**2*y0 + 216*x1*x2**2*y1 + 36*x1*x2**2*y2 + 24*x1*x2*x3*y0 - 24*x1*x2*x3*y1 - 60*x1*y0**3 + 240*x1*y0**2*y1 - 84*x1*y0**2*y2 + 24*x1*y0**2*y3 - 216*x1*y0*y1**2 - 24*x1*y0*y1*y2 - 24*x1*y0*y1*y3 + 108*x1*y0*y2**2 - 24*x1*y0*y2*y3 + 216*x1*y1**2*y2 - 216*x1*y1*y2**2 + 24*x1*y1*y2*y3 + 36*x1*y2**3 + 36*x2**3*y0 - 36*x2**3*y1 + 60*x2*y0**3 - 300*x2*y0**2*y1 + 144*x2*y0**2*y2 - 24*x2*y0**2*y3 + 456*x2*y0*y1**2 - 360*x2*y0*y1*y2 + 48*x2*y0*y1*y3 + 36*x2*y0*y2**2 - 216*x2*y1**3 + 216*x2*y1**2*y2 - 24*x2*y1**2*y3 - 36*x2*y1*y2**2, -12*x0**3*y1 + 9*x0**3*y2 + 3*x0**3*y3 + 12*x0**2*x1*y0 + 42*x0**2*x1*y1 - 45*x0**2*x1*y2 - 9*x0**2*x1*y3 - 9*x0**2*x2*y0 - 9*x0**2*x2*y1 + 18*x0**2*x2*y2 - 3*x0**2*x3*y0 + 3*x0**2*x3*y1 - 42*x0*x1**2*y0 - 30*x0*x1**2*y1 + 63*x0*x1**2*y2 + 9*x0*x1**2*y3 + 54*x0*x1*x2*y0 - 18*x0*x1*x2*y1 - 36*x0*x1*x2*y2 + 6*x0*x1*x3*y0 - 6*x0*x1*x3*y1 - 18*x0*x2**2*y0 + 18*x0*x2**2*y1 - 12*x0*y0**2*y1 + 9*x0*y0**2*y2 + 3*x0*y0**2*y3 + 42*x0*y0*y1**2 - 54*x0*y0*y1*y2 - 6*x0*y0*y1*y3 + 18*x0*y0*y2**2 - 30*x0*y1**3 + 45*x0*y1**2*y2 + 3*x0*y1**2*y3 - 18*x0*y1*y2**2 + 30*x1**3*y0 - 27*x1**3*y2 - 3*x1**3*y3 - 45*x1**2*x2*y0 + 27*x1**2*x2*y1 + 18*x1**2*x2*y2 - 3*x1**2*x3*y0 + 3*x1**2*x3*y1 + 18*x1*x2**2*y0 - 18*x1*x2**2*y1 + 12*x1*y0**3 - 42*x1*y0**2*y1 + 9*x1*y0**2*y2 - 3*x1*y0**2*y3 + 30*x1*y0*y1**2 + 18*x1*y0*y1*y2 + 6*x1*y0*y1*y3 - 18*x1*y0*y2**2 - 27*x1*y1**2*y2 - 3*x1*y1**2*y3 + 18*x1*y1*y2**2 - 9*x2*y0**3 + 45*x2*y0**2*y1 - 18*x2*y0**2*y2 - 63*x2*y0*y1**2 + 36*x2*y0*y1*y2 + 27*x2*y1**3 - 18*x2*y1**2*y2 - 3*x3*y0**3 + 9*x3*y0**2*y1 - 9*x3*y0*y1**2 + 3*x3*y1**3]
    const poly2 = [x0**2 - 6*x0*x1 + 6*x0*x2 - 2*x0*x3 + 9*x1**2 - 18*x1*x2 + 6*x1*x3 + 9*x2**2 - 6*x2*x3 + x3**2 + y0**2 - 6*y0*y1 + 6*y0*y2 - 2*y0*y3 + 9*y1**2 - 18*y1*y2 + 6*y1*y3 + 9*y2**2 - 6*y2*y3 + y3**2, -4*x0**2 + 20*x0*x1 - 16*x0*x2 + 4*x0*x3 - 24*x1**2 + 36*x1*x2 - 8*x1*x3 - 12*x2**2 + 4*x2*x3 - 4*y0**2 + 20*y0*y1 - 16*y0*y2 + 4*y0*y3 - 24*y1**2 + 36*y1*y2 - 8*y1*y3 - 12*y2**2 + 4*y2*y3, 6*x0**2 - 24*x0*x1 + 14*x0*x2 - 2*x0*x3 + 22*x1**2 - 22*x1*x2 + 2*x1*x3 + 4*x2**2 + 6*y0**2 - 24*y0*y1 + 14*y0*y2 - 2*y0*y3 + 22*y1**2 - 22*y1*y2 + 2*y1*y3 + 4*y2**2, -4*x0**2 + 12*x0*x1 - 4*x0*x2 - 8*x1**2 + 4*x1*x2 - 4*y0**2 + 12*y0*y1 - 4*y0*y2 - 8*y1**2 + 4*y1*y2, x0**2 - 2*x0*x1 + x1**2 + y0**2 - 2*y0*y1 + y1**2]

    const res = [
        ...findRealRoots(poly1),
        ...findRealRoots(poly2),
    ].filter(x => (x >= 0 && x <= 1))

    return res
} 

function findRealRoots(poly: number[]) {
  return allRoots(poly)
}